import 'package:flutter/material.dart';
// NOTE: In your project, you must create these files and import them:
import 'dashboard_content.dart'; 
import 'products_screen.dart'; 

// ***************************************************************
// TEMPORARY DEFINITIONS for a single-block run:
// ***************************************************************
// If you run this file alone, these simple placeholders will allow it to compile.
class DashboardContent extends StatelessWidget { const DashboardContent({super.key}); @override Widget build(BuildContext context) { return const Center(child: Text('Dashboard UI Content', style: TextStyle(fontSize: 24, color: Colors.blue))); } }
class ProductsScreen extends StatelessWidget { const ProductsScreen({super.key}); @override Widget build(BuildContext context) { return const Center(child: Text('Products UI Content', style: TextStyle(fontSize: 24, color: Colors.green))); } }
// ***************************************************************

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({super.key});

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  int _selectedIndex = 0;

  // List of the separate screen widgets
  static final List<Widget> _widgetOptions = <Widget>[
    const DashboardContent(), // Index 0
    const ProductsScreen(),   // Index 1
    const Center(child: Text('Orders Screen', style: TextStyle(fontSize: 24))),
    const Center(child: Text('Channels Screen', style: TextStyle(fontSize: 24))),
    const Center(child: Text('Settings Screen', style: TextStyle(fontSize: 24))),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  // --- Dynamic AppBar Logic ---

  String _getAppBarTitle() {
    return ['Dashboard', 'Products', 'Orders', 'Channels', 'Settings'][_selectedIndex];
  }

  List<Widget> _buildAppBarActions() {
    if (_selectedIndex == 1) { // Products Tab Actions (Add and Filter)
      return [
        IconButton(icon: const Icon(Icons.add_circle_outline), onPressed: () {}),
        IconButton(icon: const Icon(Icons.filter_list), onPressed: () {}),
        const SizedBox(width: 8.0),
      ];
    } else { // Dashboard/Others Actions (Notification)
      return [
        IconButton(icon: const Icon(Icons.notifications_none, color: Colors.black), onPressed: () {}),
      ];
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // The single AppBar dynamically updates for the current screen
      appBar: AppBar(
        leading: _selectedIndex == 1 ? const BackButton() : null, 
        title: Text(_getAppBarTitle()),
        actions: _buildAppBarActions(),
        
        elevation: 0.0,
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
      ),
      
      body: _widgetOptions.elementAt(_selectedIndex), 
      
      bottomNavigationBar: CustomBottomNavBar(
        selectedIndex: _selectedIndex, 
        onItemTapped: _onItemTapped,
      ),
    );
  }
}

// -------------------------------------------------------------
// CUSTOM BOTTOM NAVIGATION BAR WIDGET
// -------------------------------------------------------------

class CustomBottomNavBar extends StatelessWidget {
  final int selectedIndex;
  final ValueChanged<int> onItemTapped; 

  const CustomBottomNavBar({
    super.key,
    required this.selectedIndex,
    required this.onItemTapped,
  });

  @override
  Widget build(BuildContext context) {
    return BottomNavigationBar(
      items: const <BottomNavigationBarItem>[
        BottomNavigationBarItem(icon: Icon(Icons.home_outlined), activeIcon: Icon(Icons.home), label: 'Dashboard'),
        BottomNavigationBarItem(icon: Icon(Icons.inventory_2_outlined), activeIcon: Icon(Icons.inventory_2), label: 'Products'),
        BottomNavigationBarItem(icon: Icon(Icons.shopping_cart_outlined), activeIcon: Icon(Icons.shopping_cart), label: 'Orders'),
        BottomNavigationBarItem(icon: Icon(Icons.inventory_outlined), activeIcon: Icon(Icons.inventory), label: 'Channels'),
        BottomNavigationBarItem(icon: Icon(Icons.settings_outlined), activeIcon: Icon(Icons.settings), label: 'Settings'),
      ],
      currentIndex: selectedIndex, 
      onTap: onItemTapped, 
      selectedItemColor: Colors.blue,
      unselectedItemColor: Colors.grey,
      showUnselectedLabels: true,
      type: BottomNavigationBarType.fixed,
      elevation: 8.0,
    );
  }
}